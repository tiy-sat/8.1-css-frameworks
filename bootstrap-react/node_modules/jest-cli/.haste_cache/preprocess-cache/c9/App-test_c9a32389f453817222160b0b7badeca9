// __tests__/CheckboxWithLabel-test.js
'use strict';





jest.unmock('../modules/App');var /*istanbul ignore next*/_react = require('react'); /*istanbul ignore next*/var _react2 = _interopRequireDefault(_react);var /*istanbul ignore next*/_reactDom = require('react-dom'); /*istanbul ignore next*/var _reactDom2 = _interopRequireDefault(_reactDom);var /*istanbul ignore next*/_reactAddonsTestUtils = require('react-addons-test-utils'); /*istanbul ignore next*/var _reactAddonsTestUtils2 = _interopRequireDefault(_reactAddonsTestUtils);var /*istanbul ignore next*/_App = require('../modules/App'); /*istanbul ignore next*/var _App2 = _interopRequireDefault(_App);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Boilerplate', function () {

  it('contains hello text', function () {
    // This places our component into our test to find off of
    var appRendered = /*istanbul ignore next*/_reactAddonsTestUtils2.default.renderIntoDocument(
    /*istanbul ignore next*/_react2.default.createElement( /*istanbul ignore next*/_App2.default, /*istanbul ignore next*/null));

    // find h1 on page
    var heading = /*istanbul ignore next*/_reactAddonsTestUtils2.default.findRenderedDOMComponentWithClass(appRendered, "heading");
    // assert it has text
    expect(heading.textContent).toEqual("Hello!");});


  it('changes state when button clicked', function () {
    var appRendered = /*istanbul ignore next*/_reactAddonsTestUtils2.default.renderIntoDocument(
    /*istanbul ignore next*/_react2.default.createElement( /*istanbul ignore next*/_App2.default, /*istanbul ignore next*/null));


    var button = /*istanbul ignore next*/_reactAddonsTestUtils2.default.findRenderedDOMComponentWithTag(appRendered, "button");

    /*istanbul ignore next*/_reactAddonsTestUtils2.default.Simulate.click(button);

    expect(appRendered.state.isOpen).toEqual(true);});});